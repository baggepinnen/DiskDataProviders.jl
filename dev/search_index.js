var documenterSearchIndex = {"docs":
[{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"(Image: Build Status) (Image: codecov)","category":"page"},{"location":"#DiskDataProviders-1","page":"DiskDataProviders","title":"DiskDataProviders","text":"","category":"section"},{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"using DiskDataProviders, Test, Serialization, MLDataUtils","category":"page"},{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"Usage example","category":"page"},{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"using DiskDataProviders, Test, Serialization, MLDataUtils\n\n# === Create some random example data ===\ndirpath = mktempdir()*\"/\"\nN = 100\nT = 500\nbatch_size = 2\nqueue_length = 5\nlabs = rand(1:5, N)\nfor i = 1:N\n    a = randn(T)\n    serialize(dirpath*\"$(i).bin\", (a, labs[i]))\nend\n\nfiles = dirpath .* string.(1:N) .* \".bin\"\n\n# === Create a DiskDataProvider ===\ndataset = ChannelDiskDataProvider{Vector{Float64}, Int}((T,), batch_size, queue_length; labels=labs, files=files)","category":"page"},{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"# === Example usage of the provider ===\ndatasett, datasetv = stratifiedobs(dataset, 0.75)\n\nsort(dataset.ulabels) == 1:5\n\nx,y = first(dataset) # Get one datapoint\n\nt = start_reading(dataset) # this function initiates the reading into the buffer\n\nwait(dataset) # Wait for the reading to start before proceeding\n\nbw = batchview(dataset);\n\nxb,yb = first(bw) # Get the first batch from the buffer\n\nfor (x,y) in bw # Iterate the batches in the batchview\n    # do something with the data\nend\n\nstop!(dataset) # Stop reading into the buffer","category":"page"},{"location":"#Exported-functions-and-types-1","page":"DiskDataProviders","title":"Exported functions and types","text":"","category":"section"},{"location":"#Index-1","page":"DiskDataProviders","title":"Index","text":"","category":"section"},{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"","category":"page"},{"location":"#","page":"DiskDataProviders","title":"DiskDataProviders","text":"Modules = [DiskDataProviders]\nPrivate = false","category":"page"},{"location":"#DiskDataProviders.BufferedIterator","page":"DiskDataProviders","title":"DiskDataProviders.BufferedIterator","text":"struct BufferedIterator{T <: AbstractDiskDataProvider}\n\nCreates an iterator which uses the underlying buffer in the dataset.\n\n\n\n\n\n","category":"type"},{"location":"#DiskDataProviders.ChannelDiskDataProvider-Tuple{ChannelDiskDataProvider,AbstractArray}","page":"DiskDataProviders","title":"DiskDataProviders.ChannelDiskDataProvider","text":"ChannelDiskDataProvider(d::ChannelDiskDataProvider, inds::AbstractArray)\n\nThis constructor can be used to create a dataprovider that is a subset of another.\n\n\n\n\n\n","category":"method"},{"location":"#DiskDataProviders.ChannelDiskDataProvider-Union{Tuple{YT}, Tuple{XT}, Tuple{Any,Any,Int64}} where YT where XT","page":"DiskDataProviders","title":"DiskDataProviders.ChannelDiskDataProvider","text":"ChannelDiskDataProvider{XT, YT}(xsize, batchsize, queuelength::Int; kwargs...) where {XT, YT}\n\nConstructor for ChannelDiskDataProvider. {XT, YT} are the types of the input and output respectively.\n\n#Arguments:\n\nxsize: Tuple with sixe of each data point\nbatchsize: how many datapoints to put in a batch\nqueuelength: length of buffer\nkwargs: to set the other fields of the structure.\n\n\n\n\n\n","category":"method"},{"location":"#DiskDataProviders.QueueDiskDataProvider-Tuple{QueueDiskDataProvider,AbstractArray}","page":"DiskDataProviders","title":"DiskDataProviders.QueueDiskDataProvider","text":"QueueDiskDataProvider(d::QueueDiskDataProvider, inds::AbstractArray)\n\nThis constructor can be used to create a dataprovider that is a subset of another.\n\n\n\n\n\n","category":"method"},{"location":"#DiskDataProviders.QueueDiskDataProvider-Union{Tuple{YT}, Tuple{XT}, Tuple{Any,Any,Int64}} where YT where XT","page":"DiskDataProviders","title":"DiskDataProviders.QueueDiskDataProvider","text":"QueueDiskDataProvider{XT, YT}(xsize, batchsize, queuelength::Int; kwargs...) where {XT, YT}\n\nConstructor for QueueDiskDataProvider.\n\n{XT, YT} are the types of the input and output respectively.\n\n#Arguments:\n\nxsize: Tuple with sixe of each data point\nbatchsize: how many datapoints to put in a batch\nqueuelength: length of buffer\nkwargs: to set the other fields of the structure.\n\n\n\n\n\n","category":"method"},{"location":"#DiskDataProviders.UnbufferedIterator","page":"DiskDataProviders","title":"DiskDataProviders.UnbufferedIterator","text":"struct UnbufferedIterator{T <: AbstractDiskDataProvider}\n\nCreates an iterator which does not use the underlying buffer in the dataset.\n\n\n\n\n\n","category":"type"},{"location":"#DiskDataProviders.labels-Tuple{Any}","page":"DiskDataProviders","title":"DiskDataProviders.labels","text":"labels(d)\n\nReturn the labels in the dataset\n\n\n\n\n\n","category":"method"},{"location":"#DiskDataProviders.start_reading-Tuple{DiskDataProviders.AbstractDiskDataProvider}","page":"DiskDataProviders","title":"DiskDataProviders.start_reading","text":"start_reading(d::AbstractDiskDataProvider)\n\nInitialize reading into the buffer. This function has to be called before the dataset is used. Reading will continue until you call stop! on the dataset. If the dataset is a ChannelDiskDataProvider, this is a non-issue.\n\n\n\n\n\n","category":"method"}]
}
